Fühlen sich die Vorlesungsinhalte zu schwer an und du schaffst kaum eine Teilaufgabe ohne ganz viel Hilfe von ChatGPT und co.?
Hier sind ein paar Ressourcen und Ideen, die dir helfen könnten, Grundkenntnisse aufzubauen und ausführlicher zu vertiefen, die in der 
Vorlesung oft schnell abgehandelt werden. Achtung: Alle Ressourcen und Ideen sind keinesfalls als Ersatz für die Vorlesung und die
Übungsaufgaben gedacht, sondern als Ergänzung! 
Mein Tipp: Wenn du Einführung in die Programmierung schwer findest, nimm dir 1-2 Stunden unter der Woche und gehe einer empfohlenen Tätigkeiten
oder einer Mischung daraus nach (z. B. 30 Minuten Online-Lehrgang und 1,5 Stunden ein eigenes Projekt).


- Eigene Projekte: Vibe-Coding
()
	- immer wiederkehrende Copy-Paste-Operationen bei Dokumentbearbeitung
	- Plug-Ins für Computerspiele - aber am besten gleich in Python!
	(Viele der beliebten und weit verbreiteten Spiele erlauben kein Modding oder Plug-Ins in Python, sondern nur in anderen Sprachen 
	(C++, C#, JS, Java...). Ich würde eher davon abraten, parallel zur Einführung in die Programmierung eine weitere Sprache
	zu lernen, weil die Syntax-Unterschiede verwirrend sind und den Lernprozess für Python auszögern könnten. Vor allem, wenn man
	ohnehin Schwierigkeiten hat, der Vorlesung zu folgen. )

- Python-Spiel-Engines:
(Diese Engine ist einfacher als andere typische Engines wie pygame, aber Projekte in der Engine sind dennoch code-technisch ähnlich schwer wie die Vorlesung.
Eventuell findest du es aber motivierender, ganze Spiele selbst von Grund auf zu entwickeln.)
	- Pyxel


- Online-Lehrgänge:
(Das Prinzip ist ähnlich zu der Vorlesung, aber die Stoffdichte und der Schwierigkeitsgrad sind niedriger)
	- https://algo.bwinf.de/
	(Eine Seite von den Bundesweiten Informatikwettbewerben (BWINF) für Schüler*innen, gefördert vom Bundesministerium für Bildung. Sehr nett aufbereitet, aber ein eher kurzer Lehrgang.)
	- https://jwinf.de/contest/training
	(Ebenso ein Angebot der BWINF für Schüler*innen. Der Kurs ist zu großen Teilen sehr niederschwellig, wird aber gegen Ende logisch und mathematisch ziemlich anspruchsvoll. 
	Es werden folgende Konzepte geübt: Funktionen aufrufen, if-Verzweigungen, while-Schleifen, for-Schleifen, einfache String-Operationen)


- Handy-Apps:
(Das Wissen kommt in sehr kleinen Portionen und es fehlt das Tippen am Computer und der ganze Programmschreibprozess.
Taugt wohl kaum als einzige oder hauptsächliche Lernquelle, ist aber nett als Ergänzung. Vorteile: Motivation und Konsistenz.
Die Apps motivieren à la Duolingo, sich jeden Tag ein bisschen mit der Materie zu beschäftigen.)
	- Sololearn
	- Mimo


- Scratch
(Diese Ressource setzt 'ganz unten' an. Es geht hier nicht um Syntax, sondern um algorithmisches Denken allgemein. Die Plattform 
wurde für Schüler*innen und Kinder im jungen Alter entwickelt und ist sehr beliebt. Programmieren erfolgt per Drag-and-Drop von Blöcken
statt per Tippen. Wenn )


