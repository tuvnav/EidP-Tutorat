Vorgehen bei Bearbeitung von Übungsaufgaben:
1. Probiere erstmal mithilfe der Vorlesungsfolien und der Python-Dokumentation, auf Lösungen zu kommen.
=> Tipp zur Dokumentation: Schau dir bei jeder Methode oder jedem Attribut zuerst die Beispiele und erst dann die Erklärung an.
=> Warum? Zwei Gründe:
	- Beim Durchforsten der Vorlesungsfolien wiederholst du die Inhalte und strukturierst gleichzeitig (unbewusst) die Informationen aus den Folien räumlich in deinem Kopf, sodass du sie dir besser merkst.
	- In der Klausur hast du keine KI, sondern nur die Python-Dokumentation. Es ist eine Fähigkeit an sich, mit der Python-Dokumentation umzugehen, die du für die Klausur am besten auch üben und automatisieren solltest.

2. Nutze die KI nur wenn du stecken bleibst. Stecken bleiben heißt:
	- Du verstehst die Aufgabe nicht und brauchst eine Erklärung der Aufgabe, ODER:
	- Du verstehst die Aufgabe, aber dir fehlt ein Ansatz oder du kämpfst mit Bugs. In dem Fall heißt stecken bleiben:
		- Du hast alle relevanten Informationen aus der Vorlesung und in der Dokumentation angeschaut UND
		- Du hast kurz eigenständig nachgedacht und versucht, das Problem selbst in Teilprobleme zu zerlegen, hast akiv 
		nach anderen Herangehensweisen als deine aktuelle Lösung gesucht und kommst trotzdem nicht weiter

Wenn eines der beiden Fälle eintritt, scheue nicht davor zurück, die KI zu nutzen, aber intelligent:
	- Lass dir keine vollständigen Lösungen anzeigen, sondern Hinweise und Hilfestellungen zu deinem konkreten Problem liefern. Z. B. mit folgenden Prompts (copy-paste):

		- Aufgabe nicht verstanden:
		"Ich bin Informatikstudent*in im 1. Semester und Python-Anfänger*in. Du bist Informatik-Tutor. Ich habe folgende Aufgabestellung bekommen:
		[hier die Aufgabe reinkopieren]. Kannst du mir die Aufgabe erklären, ein paar Input-Beispiele und die dazugehörigen Output-Beispiele zeigen und erklären, wie der Input zum jeweiligen Output führt?
		Bitte liefere mir keine Lösungen und Teillösungen zu der Aufgabe."

		- Schwierigkeiten beim Lösungsansatz:
		"Ich bin Informatikstudent*in im 1. Semester und Python-Anfänger*in. Du bist Informatik-Tutor. Ich habe folgende Aufgabestellung bekommen:
		[hier die Aufgabe reinkopieren]. Bitte liefere mir keine Lösung und auch keinen Lösungsweg. Kannst du mir stattdessen durch offene Fragen helfen, unterschiedliche
		Herangehensweisen zu reflektieren und selbst auf einen Pseudo-Code zu kommen? Stelle eine Frage pro Nachricht, warte auf meine Antwort und passe die nächste Frage an. Jetzt nur die erste Frage senden und stoppen."
		
		"Ich bin Informatikstudent*in im 1. Semester und Python-Anfänger*in. Du bist Informatik-Tutor. Ich habe folgende Aufgabestellung bekommen:
		[hier die Aufgabe reinkopieren]. Kannst du eine andere, aber ähnliche Aufgabe erstellen, die dasselbe Problem behandelt, sowie einen dazugehörigen Lösungscode, und mir den Code erklären?
		Bitte liefere keine Lösung zu der eigentlichen Aufgabe."

		- Du verstehst einen Fehlercode beim Ausführen deines Programms nicht:
		"Ich habe folgenden Code geschrieben: [hier Code reinkopieren]. Ich bekomme die Fehlermeldung: [hier Fehlermeldung reinkopieren]. Kannst du
		mir Fehlermeldung erklären, ohne eine Lösung auf das Problem zu verraten? Bitte einfach erklären, ich bin Python-Anfänger*in."

		- Du hast ein Programm geschrieben, verstehst die Fehlercodes, aber weißt nicht, wie du dein Programm reparierst:
		"Ich bin Informatikstudent*in im 1. Semester und Python-Anfänger*in. Du bist Informatik-Tutor. Ich habe folgende Aufgabestellung bekommen:
		[hier die Aufgabe reinkopieren]. Ich habe folgenden Code geschrieben, aber er führt zu Fehlern: [hier Code reinkopieren]. Bitte liefere mir keine Lösungen. Hilf mir stattdessen mit Multiple-Choice-Fragen (A-D), selbst das Problem und den Lösungsweg zu verstehen.
		Stelle genau eine Frage pro Nachricht, warte auf meine A/B/C/D-Antwort und passe die nächste Frage an. Jetzt nur die erste Frage senden und stoppen."


 
((5 Kontext-Bestandteile + Art der Lernhilfe) + screenshot)


